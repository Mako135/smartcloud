---
import Text from './Text.astro';
export interface Props {
  title: string;
}

const { title } = Astro.props;
const instanceId = Math.random().toString(36).substring(2, 10);
---

<style>
  .accordion-wrapper {
    border-bottom: 1px solid #ddd;
    overflow: hidden;
    width: 100%;
    max-width: auto;
  }

  .accordion-button {
    width: 100%;
    padding: 12px;
    font-size: clamp(1.5rem, 4vw, 2rem); /* От 24px до 32px */
    text-align: left;
    border: none;
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    font-size: 18px;
    font-weight: 500;
    transition: background 0.3s ease;
    outline: none;
    font-size: clamp(1rem, 2.5vw, 1.25rem); /* От 16px до 20px */
  }

  .accordion-button:hover {
    text-decoration: underline;
    
    
  }

  .icon {
    transition: transform 0.3s ease;
  }

  .rotate {
    transform: rotate(180deg);
  }

  .accordion-content {
    max-height: 0;
    overflow: hidden;
    transition: all 0.3s;
    padding: 0 12px;
    font-size: clamp(0.875rem, 2vw, 1rem); /* От 14px до 16px */
  }

  .accordion-content.open {
    max-height: 1000px;
    padding: 12px;
  }

  .accordion-content p {
    margin: 0;
    font-size: 16px;
    line-height: 1.5;
    color: #333;
  }
</style>

<div class="accordion-wrapper" data-accordion>
  <button id={`accordion-btn-${instanceId}`} class="accordion-button" data-accordion-button>
    <Text text={title} variant='h4'/>
    <svg class="icon" width="20" height="20" viewBox="0 0 24 24" stroke="black" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
    </svg>
  </button>
  <div id={`accordion-content-${instanceId}`} class="accordion-content" data-accordion-content>
    <slot />
  </div>
</div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    if (!window.accordionsInitialized) {
      const accordionButtons = document.querySelectorAll('[data-accordion-button]');
      
      accordionButtons.forEach(button => {
        button.addEventListener('click', function() {

          const wrapper = this.closest('[data-accordion]');

          const content = wrapper.querySelector('[data-accordion-content]');
          const icon = this.querySelector('.icon');

          const isOpen = content.classList.contains('open');
          
          document.querySelectorAll('[data-accordion-content]').forEach(item => {
            item.classList.remove('open');
            
          });
          
          document.querySelectorAll('.accordion-button .icon').forEach(iconEl => {
            iconEl.classList.remove('rotate');
          });
          
          if (!isOpen) {
            content.classList.add('open');
            icon.classList.add('rotate');
          }
          setTimeout(() => {
            const headerHeight = 150;
            const contentRect = content.getBoundingClientRect();
            const viewportHeight = window.innerHeight;

       
            const isFullyVisible =
              contentRect.top >= headerHeight &&
              contentRect.bottom <= viewportHeight;

            if (!isFullyVisible) {
              const scrollOffset = window.scrollY + contentRect.top - headerHeight - 10;
              window.scrollTo({
                top: scrollOffset,
                behavior: 'smooth'
              });
            }
          }, 300);
        });
      });
      
      window.accordionsInitialized = true;
    }
  });
</script>